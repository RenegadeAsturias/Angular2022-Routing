

1º Partimos del Proyecto:

Y clonamos el repositorio en la carpeta: servicios

renegade@MiPC:~/proyectos/Angular2022$ git clone https://github.com/RenegadeAsturias/Angular2022-Servicios.git servicios


2º He creado el proyecto en GitHub:

https://github.com/RenegadeAsturias/Angular2022-Routing.git


3º Creamos un repositorio remoto para luego hacer push con los cambios al nuevo proyecto:

git remote add routing https://github.com/RenegadeAsturias/Angular2022-Routing.git


@@@ Proyecto: Routing


1º Partimos del proyecto de servicios
y queremos crear una barra de menú apuntando a 4 componentes nuevos que tenemos que construir

1.1 Componente: Home
2.2 Componente: proyectos
2.3 Componente: Quiénes somos
2.4 Componente: Contacto

Hemos estado utilizando 'app.component.ts' como el componete raíz de nuestra aplicación
pero el fichero: 'app.component.ts' no debería ser un componente y por eso vamos a extraer todo el código de este fichero
para dejarlo como contralador de Routing de los demás componentes.


2º Añadimos en 'app.component.html' los links para la barra de navegación:

<a class="nav-link" href="#">Home</a>
<a class="nav-link" href="#">Proyectos</a>
<a class="nav-link" href="#">Quienes somos</a>
<a class="nav-link" href="#">Contacto</a>


3º Creamos los componentes:

renegade@MiPC:~/proyectos/Angular2022/routing$ ng g c HomeComponent
renegade@MiPC:~/proyectos/Angular2022/routing$ ng g c ProyectosComponent
renegade@MiPC:~/proyectos/Angular2022/routing$ ng g c QuienesComponent
renegade@MiPC:~/proyectos/Angular2022/routing$ ng g c ContactoComponent


4º Crear las rutas, como hacer Routing en Angular, en 'app.component.ts'

4.1 Primero registrar los cuatro componentes creados:
(aunque el asistente ya había registrado los componentes automáticamente)

@NgModule({
  declarations: [
    AppComponent,
    EmpleadoHijoComponent,
    EmpleadoHijoCaracteristicasComponent,
    HomeComponentComponent,
    ProyectosComponentComponent,
    QuienesComponentComponent,
    ContactoComponentComponent

4.2 En el mismo fichero, justo encima añadimos las rutas
creamos un array de Rutas y creamos un objeto Routes por cada ruta:

const appRoutes:Routes=[
	{path:'', component:HomeComponentComponent},
	{path:'proyectos', component:ProyectosComponentComponent},
	{path:'quienes', component:QuienesComponentComponent},
	{path:'contacto', component:ContactoComponentComponent}
];

4.3 En la zona de imports[] añadir: RouterModule

imports: [
	BrowseModule, FormsModule, 
	RouterModule
]


4.4 Para indicarle a Angular que debe utilizar las rutas implementadas, utilizamos 'forRoot:

imports: [
	BrowseModule, FormsModule, 
	RouterModule.forRoot(appRoutes)
]

























 

















1º Para añadir un servicio hay que primero añadir el servicio:

renegade@MiPC:~/proyectos/Angular2020-servicios$ ng g s servicio-empleados

Se crearán dos archivos nuevos:

servicio-empleados.service.spect.ts
servicio-empleados.service.ts

La nueva clase creada en el fichero: 'servicio-empleados.service.ts' añade el import:

import { Injectable } from '@angular/core';

en este fichero es donde debemos programar lo que queremos que haga el servicio:

export class ServicioEmpleadosService {

	constructor() { }
	
	muestraMensaje(mensaje:string){
		alert(mensaje);
	}
}


2º No basta con añadir el servicio, desde el comando de angular CLI
es obligatorio registrar el servicio:

Hay que abrir el fichero de la aplicación: 'app.module.ts'
y registrarlo así:

@NgModule({
	declarations [...
	], ...
	providers [ServicioEmpleadosService],
})


3º La inyección del servicio se va a produccir siempre a partir del constructor
o desde el constructor.

Nota: cuando se crea un componente manualmente o desde angular CLI
el componente creado siempre tiene creado un constructor.

En cambio en el compomente de la aplicación principal: 'app.components.ts'
no se crea automáticamente hay que añadirlo manualmente.


4º Ahora podemos utilizar el servicio en el componente que nos apetezca:

Primero queremos utilizar el servicio en el componente principal de la aplicación
y tal cual se describe en la Nota anterior, añadimos en el fichero: 'app.components.ts'
un constructor manualmente:

export class AppComponent {

// Inyectar el servicio
constructor(private miServicio:ServicioEmpleadosService) { }
}

5º Ahora utilizamos el servicio, habíamos creado un método: 'muestraMensaje'

agregarEmpleado() {
	let miEmpleado=new Empleado(this.cuadroNombre, ...
	this.miServicio.muestraMensaje("Nombre del empleado: "+miEmpleado.nombre);
	... ... ...
}

6º Añadir la misma inyección del servicio en el constructor del componente hijo
y utilizarlo de forma similar a la descrita en el punto anterior.





